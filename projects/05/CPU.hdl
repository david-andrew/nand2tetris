// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /*
    Control bits notes:
    - ALU takes x,y which are D and A/M respectively
    C instruction:
    15 14 13 12    11 10  9  8  7  6    5  4  3    2  1  0
     1  1  1  a    c1 c2 c3 c4 c5 c6   d1 d2 d3   j1 j2 j3

    instruction[15] is sel for first mux
     --> also if 0, then A register load is 1
    `a` is sel for second mux (select either A or M -> ALU)
    i[11]/c1 -> zx (zero D)
    i[10]/c2 -> nx (not D)
    i[9]/c3 -> zy (zero A/M)
    i[8]/c4 -> ny (not A/M)
    i[7]/c5 -> f (i.e. & vs +)
    i[6]/c6 -> no (not ALU out)
    
    A instruction:
    0 A A A  A A A A  A A A A  A A A A
    */

    // instruction type
    And(a=true, b=instruction[15], out=cInstruction);
    Not(in=cInstruction, out=aInstruction);

    // A/M selector
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=aIn);
    
    // Registers
    //A register is set if dest=A (instruction[5] is 1)
    And(a=cInstruction,b=instruction[5],out=cLoadA);
    Or(a=aInstruction,b=cLoadA,out=loadA);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);
    //D register is set if dest=D (instruction[4] is 1)
    And(a=cInstruction,b=instruction[4],out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);


    // jump logic
    And(a=aluZrOut, b=instruction[1], out=jzr);
    And(a=aluNgOut, b=instruction[2], out=jng);
    Not(in=aluNgOut, out=notAluNgOut);
    Not(in=aluZrOut, out=notAluZrOut);
    And(a=notAluNgOut, b=notAluZrOut, out=aluPosOut);
    And(a=aluPosOut, b=instruction[0], out=jpos);
    Or(a=jzr, b=jng, out=jzrOrJng);
    Or(a=jpos, b=jzrOrJng, out=jposOrJzrOrJng);
    And(a=jposOrJzrOrJng, b=cInstruction, out=jmp);
    PC(in=aOut, load=jmp, inc=true, reset=reset, out=pcOut, out[0..14]=pc);   //Program Counter

    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluYIn);

    ALU(
        x=dOut, 
        y=aluYIn, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut, 
        out=outM, 
        zr=aluZrOut, 
        ng=aluNgOut
    );

    //write to M logic
    And(a=instruction[3], b=cInstruction, out=writeM);

}