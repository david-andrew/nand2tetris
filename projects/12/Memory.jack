// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory; // the RAM array
    static Array heap;   // the heap array

    /** Initializes the class. */
    function void init() {
        let memory = 0;         // set the address of the memory array to start at 0
        let heap = 2048;        // set the address of the heap array to start at 2048
        
        // set up the first and second block in the heap
        let heap[0] = 0;        // fist node has no free space, and is just the sentinel node
        let heap[1] = 2;        // point to the next node in the linked list
        let heap[2] = 14333;    // free space in this block. (heap has 16384-2048=14335. first block takes 2, and size slot on second block takes 1, so 14336-2-1=14333
        let heap[3] = 0;        // address of next block (null)
    
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prevAddress, curAddress;

        // cannot allocate a block of size 0 or less
        if (size < 1) {
            do Sys.error(1);
        }
        
        // prevAddress points to sentinel node
        let prevAddress = 0;
        let curAddress = heap[prevAddress+1];
        
        // search for the first available block that is large enough
        while (~(curAddress = 0)) {
            if (heap[curAddress] = size) {
                // remove this node from the linked list, and return it as the block for use
                let heap[prevAddress+1] = heap[curAddress + 1];
                return heap + curAddress + 1;
            }
            if (heap[curAddress] > size) {
        
                // split the current block into two blocks
                let heap[curAddress + 1 + size] = heap[curAddress] - (size + 1);    // set the size of the next block to be the current block size minus the requested memory
                let heap[curAddress] = size;                                        // mark the current block as the size requested
                
                // remove this node from the linked list
                let heap[prevAddress + 1] = curAddress + 1 + size;                  // set the previous block to point to the newly split off block
                let heap[curAddress + 1 + size + 1] = heap[curAddress + 1];         // set the newly split off block to point to what the current block was pointing to

                return heap + curAddress + 1;
            }

            let prevAddress = curAddress;
            let curAddress = heap[curAddress+1]; // set the base address to the address of the next block
        }

        // no block was found
        do Sys.error(1);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = heap[1];  // set this block to now point to the next block in the linked list
        let heap[1] = (o - 1) - heap;    // set the sentinel node to point to this block
        return;
    }
}
